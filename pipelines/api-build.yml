trigger:
  branches:
    include:
      - master

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'procosys - github'

# Global variables for the pipeline
variables:
 - template: templates/variables/po-variables.yml@templates
 - template: templates/variables/procosys-global-variables.yml@templates

 - name: 'repositoryName'
   value: 'po/api'

 - name: 'versionNumber'
   value: '1.000.0.'

name: '${{ variables.versionNumber }}$(Build.BuildId)-$(Date:MMddyyyy)'

stages:
# Common stage. Docker build, tag and push
- stage: common
  displayName: 'common'
  variables:
    envName: 'common'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnectionName }}'
    dockerfilePath: '$(Build.SourcesDirectory)/src/Equinor.Procosys.PO.WebApi/Dockerfile'

  jobs:
  # Docker Build
  - template: /templates/pipelines/dockerbuild-po.yml@templates
    parameters:
      deploymentName: 'docker_build'
      dependsOn: ''
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
      envGroup: '${{ variables.envGroupName }}'
      buildCommand: build
      versionNumber: ${{ variables.versionNumber }}
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Docker Build and Push (Master Only)
  - template: /templates/pipelines/dockerbuild-po.yml@templates
    parameters:
      deploymentName: 'docker_build_and_push_master_only'
      dependsOn: ''
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      envGroup: '${{ variables.envGroupName }}'
      buildCommand: buildAndPush
      versionNumber: ${{ variables.versionNumber }}
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Create Migration Script
  - template: /templates/pipelines/createsqlmigrate-po.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'create_migration_script'
      envGroup: '${{ variables.envGroupName }}'
      serviceConnection: '${{ variables.nonProdServiceConnection }}'

# Dev deploy stage
- stage: dev
  displayName: 'Dev'
  dependsOn: 'common'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'dev'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 
    aspNetCoreEnvironment: 'Development'

  jobs:
  # Run Migration Script (Predeploy)
  # - template: /templates/pipelines/runsqlmigrate-po.yml@templates
  #   parameters:
  #     dependsOn: ''
  #     deploymentName: 'run_migration_script'
  #     envGroup: '${{ variables.envGroupName }}'
  #     serviceConnection: '${{ variables.serviceConnection }}'
  #     kvName: '${{ variables.commonKeyVault }}'
  #     kvRgName: '${{ variables.commonRgName }}'
  #     kvSecret: '${{ variables.sqlAdminUserName }}-${{ variables.envName }}'
  #     serverName: '${{ variables.sqlServerName }}.database.windows.net'
  #     databaseName: '${{ variables.sqlDatabaseName }}'

  # Deploy to AKS
  - template: /templates/pipelines/kubernetes/po-deploy.yml@templates
    parameters:
      deploymentName: 'deploy_to_k8s'
      # dependsOn: 'run_migration_script'
      serviceConnection: '${{ variables.serviceConnection }}'
      env: '${{ variables.envName }}'
      envRg: '${{ variables.aksRgName }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerImage: '${{ variables.containerRegistry }}.azurecr.io/${{ variables.repositoryName }}:${{ variables.versionNumber }}$(Build.BuildId)'
      clusterName: '${{ variables.aksTestName }}'
      kvClientIdName: '${{ variables.kvClientIdName }}'
      kvUriName: '${{ variables.kvUriName }}'
      kvClientSecretName: '${{ variables.kvClientSecretName }}'
      kvIkeySecretName: '${{ variables.kvIkeySecretName }}'
      kvName: '${{ variables.kvName }}'
      kvRgName: '${{ variables.envRgName }}'
      aspNetCoreEnvironment: '${{ variables.aspNetCoreEnvironment }}'

# Test deploy stage
- stage: test
  displayName: 'Test'
  dependsOn: 'common'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'test'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 
    aspNetCoreEnvironment: 'Development'

  jobs:
  # Run Migration Script (Predeploy)
  # - template: /templates/pipelines/runsqlmigrate-po.yml@templates
  #   parameters:
  #     dependsOn: ''
  #     deploymentName: 'run_migration_script'
  #     envGroup: '${{ variables.envGroupName }}'
  #     serviceConnection: '${{ variables.serviceConnection }}'
  #     kvName: '${{ variables.commonKeyVault }}'
  #     kvRgName: '${{ variables.commonRgName }}'
  #     kvSecret: '${{ variables.sqlAdminUserName }}-${{ variables.envName }}'
  #     serverName: '${{ variables.sqlServerName }}.database.windows.net'
  #     databaseName: '${{ variables.sqlDatabaseName }}'

  # Deploy to AKS
  - template: /templates/pipelines/kubernetes/po-deploy.yml@templates
    parameters:
      deploymentName: 'deploy_to_k8s'
      # dependsOn: 'run_migration_script'
      serviceConnection: '${{ variables.serviceConnection }}'
      env: '${{ variables.envName }}'
      envRg: '${{ variables.aksRgName }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerImage: '${{ variables.containerRegistry }}.azurecr.io/${{ variables.repositoryName }}:${{ variables.versionNumber }}$(Build.BuildId)'
      clusterName: '${{ variables.aksTestName }}'
      kvClientIdName: '${{ variables.kvClientIdName }}'
      kvUriName: '${{ variables.kvUriName }}'
      kvClientSecretName: '${{ variables.kvClientSecretName }}'
      kvIkeySecretName: '${{ variables.kvIkeySecretName }}'
      kvName: '${{ variables.kvName }}'
      kvRgName: '${{ variables.envRgName }}'
      aspNetCoreEnvironment: '${{ variables.aspNetCoreEnvironment }}'

# Prod deploy stage
- stage: prod
  displayName: 'Prod'
  dependsOn: 'common'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'prod'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    serviceConnection: '${{ variables.prodServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 
    aspNetCoreEnvironment: 'Production'

  jobs:
  # # Run Migration Script (Predeploy)
  # - template: /templates/pipelines/runsqlmigrate-preservation.yml@templates
  #   parameters:
  #     dependsOn: ''
  #     deploymentName: 'run_migration_script'      
  #     envGroup: '${{ variables.envGroupName }}'
  #     serviceConnection: '${{ variables.serviceConnection }}'
  #     kvName: '${{ variables.commonKeyVault }}'
  #     kvRgName: 'pcs-common-rg'
  #     kvSecret: '${{ variables.sqlAdminUserName }}-${{ variables.envName }}'
  #     serverName: '${{ variables.sqlServerName }}.database.windows.net'
  #     databaseName: '${{ variables.sqlDatabaseName }}'      

  # Deploy to AKS
  - template: /templates/pipelines/kubernetes/po-deploy.yml@templates
    parameters:
      deploymentName: 'deploy_to_k8s'
      # dependsOn: 'run_migration_script'
      serviceConnection: '${{ variables.serviceConnection }}'
      env: '${{ variables.envName }}'
      envRg: '${{ variables.aksRgName }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerImage: '${{ variables.containerRegistry }}.azurecr.io/${{ variables.repositoryName }}:${{ variables.versionNumber }}$(Build.BuildId)'
      clusterName: '${{ variables.aksProdName }}'
      kvClientIdName: '${{ variables.kvClientIdName }}'
      kvUriName: '${{ variables.kvUriName }}'
      kvClientSecretName: '${{ variables.kvClientSecretName }}'
      kvIkeySecretName: '${{ variables.kvIkeySecretName }}'
      kvName: '${{ variables.kvName }}'
      kvRgName: '${{ variables.envRgName }}'
      aspNetCoreEnvironment: '${{ variables.aspNetCoreEnvironment }}'